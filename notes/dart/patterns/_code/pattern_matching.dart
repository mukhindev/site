main() {
  var number = 42;

  // Привычное по JavaScript поведение switch, когда значение == значению кейса
  switch (number) {
    // Константный паттерн, если number == 42
    case 42:
      print('Answer 42');
  }

  var obj1 = ['a', 'b'];

  switch (obj1) {
    // Не этот кейс. Оба элемента строки, но порядок другой.
    case ['b', 'a']:
      print('Case 1');
    // Не этот кейс. Первый элемент подходит, а второй не строка
    case ['a', 42]:
      print('Case 2');
    // Выполнение будет данного кейса. obj список с двумя строками, и именно в таком порядке
    case ['a', 'b']:
      print('Case 3'); // Case 3
  }

  var obj2 = ['a', 'b'];

  switch (obj2) {
    // С помощью заполнителя _ (wildcard) мы игнорируем первое значение в списке, говорим что оно не важно.
    // Выполниться этот кейс, так как второе значение подходит
    case [_, 'b']:
      print('Case 1'); // Case 1
    // Подходит и этот кейс, но switch выполняет первый подходящий по порядку
    case ['a', 'b']:
      print('Case 2');
  }

  var obj3 = const ['a', 42];

  switch (obj3) {
    // Выполниться этот кейс, так как первое значение строка, а вторая целое число,
    case [String _, int _]:
      print('Case 1'); // Case 1
    // Этот кейс тоже подходит, первое значение строка, а второе 7 или 42. Но первый кейс подошёл первым
    case [String _, 7 || 42]:
      print('Case 2');
  }
}
